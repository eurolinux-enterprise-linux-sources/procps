diff -Naur procps-3.2.8.orig/ps/output.c procps-3.2.8/ps/output.c
--- procps-3.2.8.orig/ps/output.c	2015-12-17 10:30:44.000000000 +0100
+++ procps-3.2.8/ps/output.c	2015-12-17 16:28:38.931001277 +0100
@@ -1143,6 +1143,41 @@
 }
 
 
+static int pr_thcgr(char *restrict const outbuf, const proc_t *restrict const pp){
+  char filename[48];
+  FILE *fd;
+  int counter = 0;
+  int c;
+  int is_cgroup = 0;
+
+  outbuf[0]='\0';
+  snprintf(filename, sizeof filename, "/proc/%d/task/%d/cgroup", pp->tgid, pp->tid);
+  fd = fopen(filename, "r");
+  if (likely(fd == NULL)) goto fail;
+  while (( (c = fgetc(fd)) != EOF) && (counter<665)) {
+    if (is_cgroup == 0) {
+      if (c == ':') {
+        is_cgroup = 1;
+        if (counter>0)
+          outbuf[counter++]=';';
+      }
+    }else
+      if ((c == '\n') || (c == '\0'))
+        is_cgroup = 0;
+      else
+        outbuf[counter++]=c;
+  }
+  outbuf[counter]='\0';
+  fclose(fd);
+  if (counter>0) 
+    return counter;
+fail:
+  outbuf[0] = '-';
+  outbuf[1] = '\0';
+  return 1;
+}
+
+
 #if 0
 /****************** FLASK & seLinux security stuff **********************/
 // move the bulk of this to libproc sometime
@@ -1495,6 +1530,7 @@
 {"sz",        "SZ",      pr_sz,       sr_nop,     5,   0,    HPU, PO|RIGHT},
 {"taskid",    "TASKID",  pr_nop,      sr_nop,     5,   0,    SUN, TO|PIDMAX|RIGHT}, // is this a thread ID?
 {"tdev",      "TDEV",    pr_nop,      sr_nop,     4,   0,    XXX, AN|RIGHT},
+{"thcgr",     "THCGR",   pr_thcgr,    sr_nop,    35,   0,    LNX, PO|LEFT},  /* thread cgroups */
 {"thcount",   "THCNT",   pr_nlwp,     sr_nlwp,    5,   0,    AIX, PO|RIGHT},
 {"tid",       "TID",     pr_thread,   sr_tid,     5,   0,    AIX, TO|PIDMAX|RIGHT},
 {"time",      "TIME",    pr_time,     sr_nop,     8,   0,    U98, ET|RIGHT}, /*cputime*/ /* was 6 wide */
diff -Naur procps-3.2.8.orig/ps/ps.1 procps-3.2.8/ps/ps.1
--- procps-3.2.8.orig/ps/ps.1	2015-12-17 10:30:45.000000000 +0100
+++ procps-3.2.8/ps/ps.1	2015-12-17 16:34:18.803000481 +0100
@@ -1363,6 +1363,10 @@
 See \fBvsz\fR and \fBrss\fR.
 T}
 
+thcgr	THCGR	T{
+display control groups to which the thread belongs.
+T}
+
 thcount	THCNT	T{
 see \fBnlwp\fR.  (alias\ \fBnlwp\fR).
 number of kernel threads owned by the process.
